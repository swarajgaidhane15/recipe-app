{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","image","calories","ingredients","calo","toFixed","className","style","recipe","map","ingredient","index","key","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipe","a","fetch","process","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","data-testid","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,2MCsB3CC,EAlBA,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAMC,EAAgC,EAAhCA,MAAMC,EAA0B,EAA1BA,SAASC,EAAiB,EAAjBA,YAE5BC,EAAOF,EAASG,QAAQ,GAE9B,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BAAKR,GACL,4BACGG,EAAYM,KAAI,SAACC,EAAYC,GAAb,OACf,wBAAIC,IAAKD,GAAQD,EAAWG,UAGhC,2BAAIT,GACJ,yBAAKE,UAAWC,IAAMN,MAAOa,IAAKb,EAAOc,IAAI,O,MC2C1CC,MAvDf,WAAgB,IAAD,EAEiBC,mBAAS,IAF1B,mBAENC,EAFM,KAEGC,EAFH,OAGeF,mBAAS,IAHxB,mBAGNG,EAHM,KAGEC,EAHF,OAIaJ,mBAAS,YAJtB,mBAINK,EAJM,KAICC,EAJD,KAMbC,qBAAU,WACRC,MAEC,CAACH,IAEJ,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCL,EAApC,mBAAoDM,WAApD,oBAAwFA,qCADpG,cACVC,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBZ,EAAWY,EAAKC,MAHA,2CAAH,qDAgBf,OACE,yBAAK1B,UAAU,OACb,0BAAM2B,SARW,SAAAC,GACnBA,EAAEC,iBACFZ,EAASH,GACTC,EAAU,KAKsBf,UAAU,eACtC,2BACEA,UAAU,aACV8B,KAAK,OACLC,MAAOjB,EACPkB,SAjBR,SAAsBJ,GACpBb,EAAUa,EAAEK,OAAOF,QAiBbG,cAAY,iBAEd,4BAAQlC,UAAU,gBAAgB8B,KAAK,SAASI,cAAY,iBAA5D,WAEF,yBAAKlC,UAAU,WACZY,EAAQT,KAAI,SAACD,EAAQG,GAAT,OACX,kBAAC,EAAD,CACEC,IAAKD,EACLX,MAAOQ,EAAOA,OAAOiC,MACrBxC,MAAOO,EAAOA,OAAOP,MACrBC,SAAUM,EAAOA,OAAON,SACxBC,YAAaK,EAAOA,OAAOL,oBCxCnBuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ccb89674.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2QUv5\",\"image\":\"recipe_image__2D_Xf\"};","//jshint esversion:10\n\nimport React from 'react';\nimport style from './recipe.module.css'\n\nconst Recipe = ({title,image,calories,ingredients}) => {\n\n    const calo = calories.toFixed(2);\n\n    return(\n        <div className={style.recipe}>\n            <h1>{title}</h1>\n            <ol>\n              {ingredients.map((ingredient, index) => (\n                <li key={index}>{ingredient.text}</li>\n              ))}\n            </ol>\n            <p>{calo}</p>\n            <img className={style.image} src={image} alt=\"\" />\n        </div>\n    );\n};\n\nexport default Recipe;\n","//jshint esversion:10\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport Recipe from './Recipe';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [query, setQuery] = useState('cucumber');\r\n\r\n  useEffect(() => {\r\n    getRecipe();\r\n    //eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [query]);\r\n\r\n  const getRecipe = async () => {\r\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${process.env.REACT_APP_ID}&app_key=${process.env.REACT_APP_KEY}`);\r\n    const data = await response.json();\r\n    setRecipes(data.hits);\r\n  };\r\n\r\n  function handleChange(e) {\r\n    setSearch(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    setSearch(\"\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <form onSubmit={handleSubmit} className=\"search-form\">\r\n        <input\r\n          className=\"search-bar\"\r\n          type=\"text\"\r\n          value={search}\r\n          onChange={handleChange}\r\n          data-testid=\"search-input\"\r\n        />\r\n        <button className=\"search-button\" type=\"submit\" data-testid=\"search-button\">Search</button>\r\n      </form>\r\n      <div className=\"recipes\">\r\n        {recipes.map((recipe, index) => (\r\n          <Recipe\r\n            key={index}\r\n            title={recipe.recipe.label}\r\n            image={recipe.recipe.image}\r\n            calories={recipe.recipe.calories}\r\n            ingredients={recipe.recipe.ingredients}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}